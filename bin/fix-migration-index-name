#!/usr/bin/env ruby

require 'open3'

db_migration_command = 'rails db:migrate'

_, stderr, _ = Open3.capture3(db_migration_command)

def migration_file_location(error_line_list, line_index)
  location_without_extension = error_line_list[line_index + 1].split('.rb:')[0]

  "#{location_without_extension}.rb"
end

def extract_referenced_table(current_index_name)
  table_name = current_index_name.split('_on_')[1]

  table_name.slice!('_id')

  table_name
end

def trim_index_name(current_index_name)
  max_index_name_length = 63
  temporary_index_name = current_index_name
  indexed_table_names_separator = '_on_'

  while temporary_index_name.length > max_index_name_length
    table_names = temporary_index_name.split(indexed_table_names_separator)
    primary_table_name_array = table_names[0].split('_')
    referenced_table_name_array = table_names[1].split('_')

    if primary_table_name_array.length >= referenced_table_name_array.length
      primary_table_name_array.delete_at(1)
    else
      referenced_table_name_array.delete_at(0)
    end

    temporary_index_name = primary_table_name_array.join('_') + indexed_table_names_separator + referenced_table_name_array.join('_')
  end

  temporary_index_name
end

def updated_migration_file_content(file_location, referenced_table_name, new_index_name)
  migration_file_lines = File.readlines(file_location)

  updated_migration_lines_array = []

  migration_file_lines.each do |line|
    referenced_column_line = "t.references :#{referenced_table_name}"

    if line.include?(referenced_column_line)
      trimmed_line = line.tr("\n", '')
      updated_line = "#{trimmed_line}, index: { name: \"#{new_index_name}\" }\n"

      updated_migration_lines_array.push(updated_line)
    else
      updated_migration_lines_array.push(line)
    end
  end

  updated_migration_lines_array.join
end

error_line = ''
file_location = ''

error_line_list = stderr.each_line.map(&:itself)

# `rails db:migrate` doesn't throw any error
exit if error_line_list.length.zero?

stderr.each_line.with_index do |line, index|
  if line.include?("ArgumentError:")
    error_line = line

    file_location = migration_file_location(error_line_list, index)
  end
end

puts error_line + "\n"

current_index_name = error_line[/ArgumentError: Index name '(.*?)' on table '/m, 1]

referenced_table_name = extract_referenced_table(current_index_name)

puts "Trimming index name to make it less than or equal to 63 characters\n"

new_index_name = trim_index_name(current_index_name)

puts "Adding trimmed index name '#{new_index_name}' to the referenced column\n"

updated_file_content = updated_migration_file_content(file_location, referenced_table_name, new_index_name)

puts "Updating the migration file\n"

File.write(file_location, updated_file_content)

puts 'Success'
